{"ast":null,"code":"export function includeKeys(object, predicate) {\n  const result = {};\n  if (Array.isArray(predicate)) {\n    for (const key of predicate) {\n      const descriptor = Object.getOwnPropertyDescriptor(object, key);\n      if (descriptor !== null && descriptor !== void 0 && descriptor.enumerable) {\n        Object.defineProperty(result, key, descriptor);\n      }\n    }\n  } else {\n    // `Reflect.ownKeys()` is required to retrieve symbol properties\n    for (const key of Reflect.ownKeys(object)) {\n      const descriptor = Object.getOwnPropertyDescriptor(object, key);\n      if (descriptor.enumerable) {\n        const value = object[key];\n        if (predicate(key, value, object)) {\n          Object.defineProperty(result, key, descriptor);\n        }\n      }\n    }\n  }\n  return result;\n}\nexport function excludeKeys(object, predicate) {\n  if (Array.isArray(predicate)) {\n    const set = new Set(predicate);\n    return includeKeys(object, key => !set.has(key));\n  }\n  return includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}