{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/gdb/src/Eviden/O-CTO/future-scope/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n  polygonStart() {\n    this._line = 0;\n  }\n  polygonEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n  point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._append(_templateObject || (_templateObject = _taggedTemplateLiteral([\"M\", \",\", \"\"])), x, y);\n          this._point = 1;\n          break;\n        }\n      case 1:\n        {\n          this._append(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"L\", \",\", \"\"])), x, y);\n          break;\n        }\n      default:\n        {\n          this._append(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"M\", \",\", \"\"])), x, y);\n          if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n            const r = this._radius;\n            const s = this._;\n            this._ = \"\"; // stash the old string so we can cache the circle path fragment\n            this._append(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"m0,\", \"a\", \",\", \" 0 1,1 0,\", \"a\", \",\", \" 0 1,1 0,\", \"z\"])), r, r, r, -2 * r, r, r, 2 * r);\n            cacheRadius = r;\n            cacheAppend = this._append;\n            cacheCircle = this._;\n            this._ = s;\n          }\n          this._ += cacheCircle;\n          break;\n        }\n    }\n  }\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n}\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(\"invalid digits: \".concat(digits));\n  if (d > 15) return append;\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n  return cacheAppend;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}