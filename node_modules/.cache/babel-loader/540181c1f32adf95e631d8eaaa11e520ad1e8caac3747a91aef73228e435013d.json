{"ast":null,"code":"'use strict';\n\nlet Container = require('./container');\nlet LazyResult, Processor;\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({\n      type: 'document',\n      ...defaults\n    });\n    if (!this.nodes) {\n      this.nodes = [];\n    }\n  }\n  toResult() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  }\n}\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant;\n};\nDocument.registerProcessor = dependant => {\n  Processor = dependant;\n};\nmodule.exports = Document;\nDocument.default = Document;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}