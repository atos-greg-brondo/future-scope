{"ast":null,"code":"import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";export const ChangedBlip=_ref=>{let{blip,config,...props}=_ref;const centeredX=blip.coordinates.x-config.chartConfig.blipSize/2,centeredY=blip.coordinates.y-config.chartConfig.blipSize/2;return/*#__PURE__*/_jsx(\"rect\",{transform:\"rotate(-45 \".concat(centeredX,\" \").concat(centeredY,\")\"),x:centeredX,y:centeredY,width:config.chartConfig.blipSize,height:config.chartConfig.blipSize,rx:\"3\",...props});};export const NewBlip=_ref2=>{let{blip,config,...props}=_ref2;const centeredX=blip.coordinates.x-config.chartConfig.blipSize/2,centeredY=blip.coordinates.y-config.chartConfig.blipSize/2;/*\n    The below is a predefined path of a triangle with rounded corners.\n    I didn't find any more human friendly way of doing this as all examples I found have tons of lines of code\n    e.g. https://observablehq.com/@perlmonger42/interactive-rounded-corners-on-svg-polygons-using-d3-js\n    */return/*#__PURE__*/_jsx(\"path\",{transform:\"translate(\".concat(centeredX,\", \").concat(centeredY,\")\"),d:\"M.247 10.212l5.02-8.697a2 2 0 013.465 0l5.021 8.697a2 2 0 01-1.732 3H1.98a2 2 0 01-1.732-3z\",...props});};export const DefaultBlip=_ref3=>{let{blip,config,...props}=_ref3;return/*#__PURE__*/_jsx(\"circle\",{r:config.chartConfig.blipSize/2,cx:blip.coordinates.x,cy:blip.coordinates.y,...props});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}