{"ast":null,"code":"import React from\"react\";import{FlagType}from\"../../model\";import Link from\"../Link/Link\";import{ChangedBlip,DefaultBlip,NewBlip}from\"./BlipShapes\";/*\nSee https://medium.com/create-code/build-a-radar-diagram-with-d3-js-9db6458a9248\nfor a good explanation of formulas used to calculate various things in this component\n*/import{jsx as _jsx}from\"react/jsx-runtime\";function generateCoordinates(blip,xScale,yScale,config){const pi=Math.PI,ringRadius=config.chartConfig.ringsAttributes[blip.ringPosition].radius,previousRingRadius=blip.ringPosition===0?0:config.chartConfig.ringsAttributes[blip.ringPosition-1].radius,ringPadding=0.7;// radian between 0 and 90 degrees\nconst randomDegree=(0.1+(blip.angleFraction||Math.random())*0.8)*90*pi/180;// random distance from the centre of the radar, but within given ring. Also, with some \"padding\" so the points don't touch ring borders.\nconst radius=pointBetween(previousRingRadius+ringPadding,ringRadius-ringPadding,blip.radiusFraction||Math.random());/*\n    Multiples of PI/2. To apply the calculated position to the specific quadrant.\n    Order here is counter-clockwise, so we need to \"invert\" quadrant positions (i.e. swap 2 with 4)\n    */const shift=pi*[1,4,2,3][blip.quadrantPosition-1]/2;return{x:xScale(Math.cos(randomDegree+shift)*radius),y:yScale(Math.sin(randomDegree+shift)*radius)};}function pointBetween(min,max,amount){return amount*(max-min)+min;}function distanceBetween(point1,point2){const a=point2.x-point1.x;const b=point2.y-point1.y;return Math.sqrt(a*a+b*b);}function renderBlip(blip,index,config){const props={blip,className:\"blip\",fill:blip.colour,\"data-background-color\":blip.colour,\"data-text-color\":blip.txtColour,\"data-tip\":blip.title,key:index};switch(blip.flag){case FlagType.new:return/*#__PURE__*/_jsx(NewBlip,{...props,config:config});case FlagType.changed:return/*#__PURE__*/_jsx(ChangedBlip,{...props,config:config});default:return/*#__PURE__*/_jsx(DefaultBlip,{...props,config:config});}}const BlipPoints=_ref=>{let{items,xScale,yScale,config}=_ref;const blips=items.reduce((list,item)=>{if(!item.ring||!item.quadrant){// skip the blip if it doesn't have a ring or quadrant assigned\nreturn list;}const quadrantConfig=config.quadrantsMap[item.quadrant];if(!quadrantConfig){return list;}let blip={...item,quadrantPosition:quadrantConfig.position,ringPosition:config.rings.findIndex(r=>r===item.ring),colour:quadrantConfig.colour,txtColour:quadrantConfig.txtColour,coordinates:{x:0,y:0}};let point;let counter=1;let distanceBetweenCheck;do{const localpoint=generateCoordinates(blip,xScale,yScale,config);point=localpoint;counter++;/*\n            Generate position of the new blip until it has a satisfactory distance to every other blip (so that they don't touch each other)\n            and quadrant borders (so that they don't overlap quadrants)\n            This feels pretty inefficient, but good enough for now.\n            */distanceBetweenCheck=list.some(b=>distanceBetween(localpoint,b.coordinates)<config.chartConfig.blipSize+config.chartConfig.blipSize/2);}while(counter<100&&(Math.abs(point.x-xScale(0))<15||Math.abs(point.y-yScale(0))<15||distanceBetweenCheck));blip.coordinates=point;list.push(blip);return list;},[]);return/*#__PURE__*/_jsx(\"g\",{className:\"blips\",children:blips.map((blip,index)=>/*#__PURE__*/_jsx(Link,{pageName:\"\".concat(blip.quadrant,\"/\").concat(blip.name),children:renderBlip(blip,index,config)},index))});};export default BlipPoints;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}